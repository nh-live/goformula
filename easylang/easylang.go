// Code generated by goyacc - DO NOT EDIT.

package easylang

import __yyfmt__ "fmt"

import "strings"

var _context = newContext()

type yySymType struct {
	yys          int
	value        float64
	str          string
	expr         expression
	descriptions []string
	arguments    []expression
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57374
	yyEofCode   = 57344
	AND         = 57362
	COLONEQUAL  = 57352
	COMMA       = 57355
	DIVIDE      = 57372
	DOLLAR      = 57359
	DOT         = 57357
	EQ          = 57363
	EQUALS      = 57350
	GE          = 57366
	GT          = 57365
	ID          = 57346
	LE          = 57368
	LPAREN      = 57353
	LT          = 57367
	MINUS       = 57369
	NE          = 57364
	NOT         = 57360
	NUM         = 57347
	OR          = 57361
	PARAMEQUAL  = 57351
	PLUS        = 57370
	POUND       = 57358
	RPAREN      = 57354
	SEMI        = 57356
	STRING      = 57348
	STRING_EXPR = 57349
	TIMES       = 57371
	UNARY       = 57373
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -46
)

var (
	yyPrec = map[int]int{
		OR:     0,
		AND:    1,
		EQ:     2,
		NE:     2,
		GT:     3,
		GE:     3,
		LT:     3,
		LE:     3,
		MINUS:  4,
		PLUS:   4,
		TIMES:  5,
		DIVIDE: 5,
		UNARY:  6,
	}

	yyXLAT = map[int]int{
		57369: 0,  // MINUS (54x)
		57355: 1,  // COMMA (44x)
		57356: 2,  // SEMI (40x)
		57361: 3,  // OR (38x)
		57354: 4,  // RPAREN (36x)
		57346: 5,  // ID (34x)
		57362: 6,  // AND (32x)
		57353: 7,  // LPAREN (32x)
		57347: 8,  // NUM (32x)
		57363: 9,  // EQ (30x)
		57364: 10, // NE (30x)
		57360: 11, // NOT (29x)
		57348: 12, // STRING (29x)
		57349: 13, // STRING_EXPR (29x)
		57366: 14, // GE (28x)
		57365: 15, // GT (28x)
		57368: 16, // LE (28x)
		57367: 17, // LT (28x)
		57370: 18, // PLUS (25x)
		57384: 19, // postfix_expression (21x)
		57385: 20, // primary_expression (21x)
		57390: 21, // unary_expression (21x)
		57372: 22, // DIVIDE (20x)
		57371: 23, // TIMES (20x)
		57383: 24, // multiplicative_expression (17x)
		57375: 25, // additive_expression (15x)
		57386: 26, // relational_expression (11x)
		57344: 27, // $end (10x)
		57377: 28, // equality_expression (9x)
		57382: 29, // logical_and_expression (8x)
		57378: 30, // expression (7x)
		57381: 31, // graph_description_list (3x)
		57358: 32, // POUND (3x)
		57389: 33, // statement_suffix (3x)
		57357: 34, // DOT (2x)
		57380: 35, // graph_description (2x)
		57387: 36, // statement (2x)
		57376: 37, // argument_expression_list (1x)
		57352: 38, // COLONEQUAL (1x)
		57350: 39, // EQUALS (1x)
		57379: 40, // formula (1x)
		57351: 41, // PARAMEQUAL (1x)
		57388: 42, // statement_list (1x)
		57374: 43, // $default (0x)
		57359: 44, // DOLLAR (0x)
		57345: 45, // error (0x)
		57373: 46, // UNARY (0x)
	}

	yySymNames = []string{
		"MINUS",
		"COMMA",
		"SEMI",
		"OR",
		"RPAREN",
		"ID",
		"AND",
		"LPAREN",
		"NUM",
		"EQ",
		"NE",
		"NOT",
		"STRING",
		"STRING_EXPR",
		"GE",
		"GT",
		"LE",
		"LT",
		"PLUS",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"DIVIDE",
		"TIMES",
		"multiplicative_expression",
		"additive_expression",
		"relational_expression",
		"$end",
		"equality_expression",
		"logical_and_expression",
		"expression",
		"graph_description_list",
		"POUND",
		"statement_suffix",
		"DOT",
		"graph_description",
		"statement",
		"argument_expression_list",
		"COLONEQUAL",
		"EQUALS",
		"formula",
		"PARAMEQUAL",
		"statement_list",
		"$default",
		"DOLLAR",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {40, 1},
		2:  {42, 1},
		3:  {42, 2},
		4:  {36, 4},
		5:  {36, 4},
		6:  {36, 10},
		7:  {36, 2},
		8:  {33, 1},
		9:  {33, 2},
		10: {31, 2},
		11: {31, 3},
		12: {35, 1},
		13: {20, 1},
		14: {20, 1},
		15: {20, 1},
		16: {20, 3},
		17: {19, 1},
		18: {19, 4},
		19: {19, 3},
		20: {19, 3},
		21: {19, 5},
		22: {19, 1},
		23: {37, 1},
		24: {37, 3},
		25: {21, 1},
		26: {21, 2},
		27: {21, 2},
		28: {24, 1},
		29: {24, 3},
		30: {24, 3},
		31: {25, 1},
		32: {25, 3},
		33: {25, 3},
		34: {26, 1},
		35: {26, 3},
		36: {26, 3},
		37: {26, 3},
		38: {26, 3},
		39: {28, 1},
		40: {28, 3},
		41: {28, 3},
		42: {29, 1},
		43: {29, 3},
		44: {30, 1},
		45: {30, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [86][]uint16{
		// 0
		{59, 5: 50, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 65, 51, 36: 49, 40: 47, 42: 48},
		{27: 46},
		{59, 5: 50, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 45, 64, 65, 51, 36: 131},
		{44, 5: 44, 7: 44, 44, 11: 44, 44, 44, 27: 44},
		{33, 33, 33, 33, 6: 33, 89, 9: 33, 33, 14: 33, 33, 33, 33, 33, 22: 33, 33, 32: 91, 34: 90, 38: 117, 116, 41: 118},
		// 5
		{1: 110, 108, 98, 31: 109, 33: 107},
		{32, 32, 32, 32, 32, 6: 32, 9: 32, 32, 14: 32, 32, 32, 32, 32, 22: 32, 32},
		{31, 31, 31, 31, 31, 6: 31, 9: 31, 31, 14: 31, 31, 31, 31, 31, 22: 31, 31},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 65, 105},
		{29, 29, 29, 29, 29, 6: 29, 9: 29, 29, 14: 29, 29, 29, 29, 29, 22: 29, 29},
		// 10
		{24, 24, 24, 24, 24, 6: 24, 9: 24, 24, 14: 24, 24, 24, 24, 24, 22: 24, 24},
		{21, 21, 21, 21, 21, 6: 21, 9: 21, 21, 14: 21, 21, 21, 21, 21, 22: 21, 21},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 104},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 103},
		{18, 18, 18, 18, 18, 6: 18, 9: 18, 18, 14: 18, 18, 18, 18, 18, 22: 18, 18},
		// 15
		{15, 15, 15, 15, 15, 6: 15, 9: 15, 15, 14: 15, 15, 15, 15, 15, 22: 81, 80},
		{78, 12, 12, 12, 12, 6: 12, 9: 12, 12, 14: 12, 12, 12, 12, 77},
		{1: 7, 7, 7, 7, 6: 7, 9: 7, 7, 14: 75, 73, 74, 72},
		{1: 4, 4, 4, 4, 6: 4, 9: 69, 70},
		{1: 2, 2, 2, 2, 6: 66},
		// 20
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 68},
		{33, 33, 33, 33, 33, 6: 33, 89, 9: 33, 33, 14: 33, 33, 33, 33, 33, 22: 33, 33, 32: 91, 34: 90},
		{1: 3, 3, 3, 3, 6: 3, 9: 69, 70},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 88},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 71},
		// 25
		{1: 5, 5, 5, 5, 6: 5, 9: 5, 5, 14: 75, 73, 74, 72},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 87},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 86},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 85},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 76},
		// 30
		{78, 8, 8, 8, 8, 6: 8, 9: 8, 8, 14: 8, 8, 8, 8, 77},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 84},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 79},
		{13, 13, 13, 13, 13, 6: 13, 9: 13, 13, 14: 13, 13, 13, 13, 13, 22: 81, 80},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 83},
		// 35
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 82},
		{16, 16, 16, 16, 16, 6: 16, 9: 16, 16, 14: 16, 16, 16, 16, 16, 22: 16, 16},
		{17, 17, 17, 17, 17, 6: 17, 9: 17, 17, 14: 17, 17, 17, 17, 17, 22: 17, 17},
		{14, 14, 14, 14, 14, 6: 14, 9: 14, 14, 14: 14, 14, 14, 14, 14, 22: 81, 80},
		{78, 9, 9, 9, 9, 6: 9, 9: 9, 9, 14: 9, 9, 9, 9, 77},
		// 40
		{78, 10, 10, 10, 10, 6: 10, 9: 10, 10, 14: 10, 10, 10, 10, 77},
		{78, 11, 11, 11, 11, 6: 11, 9: 11, 11, 14: 11, 11, 11, 11, 77},
		{1: 6, 6, 6, 6, 6: 6, 9: 6, 6, 14: 75, 73, 74, 72},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 65, 97, 37: 96},
		{5: 93},
		// 45
		{5: 92},
		{26, 26, 26, 26, 26, 6: 26, 9: 26, 26, 14: 26, 26, 26, 26, 26, 22: 26, 26},
		{27, 27, 27, 27, 27, 6: 27, 9: 27, 27, 14: 27, 27, 27, 27, 27, 22: 27, 27, 32: 94},
		{5: 95},
		{25, 25, 25, 25, 25, 6: 25, 9: 25, 25, 14: 25, 25, 25, 25, 25, 22: 25, 25},
		// 50
		{1: 101, 4: 100},
		{1: 23, 3: 98, 23},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 99},
		{1: 1, 1, 1, 1, 6: 66},
		{28, 28, 28, 28, 28, 6: 28, 9: 28, 28, 14: 28, 28, 28, 28, 28, 22: 28, 28},
		// 55
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 65, 102},
		{1: 22, 3: 98, 22},
		{19, 19, 19, 19, 19, 6: 19, 9: 19, 19, 14: 19, 19, 19, 19, 19, 22: 19, 19},
		{20, 20, 20, 20, 20, 6: 20, 9: 20, 20, 14: 20, 20, 20, 20, 20, 22: 20, 20},
		{3: 98, 106},
		// 60
		{30, 30, 30, 30, 30, 6: 30, 9: 30, 30, 14: 30, 30, 30, 30, 30, 22: 30, 30},
		{39, 5: 39, 7: 39, 39, 11: 39, 39, 39, 27: 39},
		{38, 5: 38, 7: 38, 38, 11: 38, 38, 38, 27: 38},
		{1: 114, 113},
		{5: 112, 35: 111},
		// 65
		{1: 36, 36},
		{1: 34, 34},
		{37, 5: 37, 7: 37, 37, 11: 37, 37, 37, 27: 37},
		{5: 112, 35: 115},
		{1: 35, 35},
		// 70
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 65, 129},
		{59, 5: 67, 7: 54, 52, 11: 58, 53, 56, 19: 57, 55, 60, 24: 61, 62, 63, 28: 64, 65, 127},
		{7: 119},
		{8: 120},
		{1: 121},
		// 75
		{8: 122},
		{1: 123},
		{8: 124},
		{4: 125},
		{2: 126},
		// 80
		{40, 5: 40, 7: 40, 40, 11: 40, 40, 40, 27: 40},
		{1: 110, 108, 98, 31: 109, 33: 128},
		{41, 5: 41, 7: 41, 41, 11: 41, 41, 41, 27: 41},
		{1: 110, 108, 98, 31: 109, 33: 130},
		{42, 5: 42, 7: 42, 42, 11: 42, 42, 42, 27: 42},
		// 85
		{43, 5: 43, 7: 43, 43, 11: 43, 43, 43, 27: 43},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 45

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 4:
		{
			if _, ok := yyS[yypt-1].expr.(*stringexpr); ok {
				lexer, _ := yylex.(*yylexer)
				_context.addError(GeneralError(lexer.lineno, lexer.column, "string can't be right value"))
			}
			yyVAL.expr = AssignmentExpression(_context, yyS[yypt-3].str, yyS[yypt-1].expr, false)
			_context.addOutput(yyVAL.expr.VarName(), yyS[yypt-0].descriptions, 0, 0)
		}
	case 5:
		{
			if _, ok := yyS[yypt-1].expr.(*stringexpr); ok {
				lexer, _ := yylex.(*yylexer)
				_context.addError(GeneralError(lexer.lineno, lexer.column, "string can't be right value"))
			}
			yyVAL.expr = AssignmentExpression(_context, yyS[yypt-3].str, yyS[yypt-1].expr, false)
			_context.addNotOutputVar(yyVAL.expr.VarName(), yyS[yypt-0].descriptions, 0, 0)
		}
	case 6:
		{
			yyVAL.expr = ParamExpression(_context, yyS[yypt-9].str, yyS[yypt-6].value, yyS[yypt-4].value, yyS[yypt-2].value)
		}
	case 7:
		{
			if _, ok := yyS[yypt-1].expr.(*stringexpr); ok {
				lexer, _ := yylex.(*yylexer)
				_context.addError(GeneralError(lexer.lineno, lexer.column, "string can't be right value"))
			}
			varName := _context.newAnonymousVarName()
			yyVAL.expr = AssignmentExpression(_context, varName, yyS[yypt-1].expr, true)
			_context.addOutput(varName, yyS[yypt-0].descriptions, 0, 0)
		}
	case 9:
		{
			yyVAL.descriptions = yyS[yypt-1].descriptions
		}
	case 10:
		{
			if !IsValidDescription(yyS[yypt-0].str) {
				lexer, _ := yylex.(*yylexer)
				_context.addError(BadGraphDescError(lexer.lineno, lexer.column, yyS[yypt-0].str))
			}
			yyVAL.descriptions = append(yyVAL.descriptions, yyS[yypt-0].str)
		}
	case 11:
		{
			if !IsValidDescription(yyS[yypt-0].str) {
				lexer, _ := yylex.(*yylexer)
				_context.addError(BadGraphDescError(lexer.lineno, lexer.column, yyS[yypt-0].str))
			}
			yyVAL.descriptions = append(yyS[yypt-2].descriptions, yyS[yypt-0].str)
		}
	case 12:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 13:
		{
			expr := _context.defined(yyS[yypt-0].str)
			if expr == nil {
				expr = _context.definedParam(yyS[yypt-0].str)
			}
			if expr != nil {
			} else if funcName, ok := noArgFuncMap[yyS[yypt-0].str]; ok {
				expr = FunctionExpression(_context, funcName, nil)
			} else {
				lexer, _ := yylex.(*yylexer)
				_context.addError(UndefinedVarError(lexer.lineno, lexer.column, yyS[yypt-0].str))
				expr = ErrorExpression(_context, yyS[yypt-0].str)
			}
			yyVAL.expr = expr
		}
	case 14:
		{
			yyVAL.expr = ConstantExpression(_context, yyS[yypt-0].value)
		}
	case 15:
		{
			yyVAL.expr = StringExpression(_context, yyS[yypt-0].str[1:len(yyS[yypt-0].str)-1])
		}
	case 16:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 17:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 18:
		{
			if _, ok := funcMap[yyS[yypt-3].str]; !ok {
				lexer, _ := yylex.(*yylexer)
				_context.addError(UndefinedFunctionError(lexer.lineno, lexer.column, yyS[yypt-3].str))
				yyVAL.expr = ErrorExpression(_context, yyS[yypt-3].str)
			} else {
				yyVAL.expr = FunctionExpression(_context, yyS[yypt-3].str, yyS[yypt-1].arguments)
			}
		}
	case 19:
		{
			if !_context.isReferenceSupport(yyS[yypt-2].str, yyS[yypt-0].str) {
				lexer, _ := yylex.(*yylexer)
				_context.addError(GeneralError(lexer.lineno, lexer.column, __yyfmt__.Sprintf("%s.%s not supported", yyS[yypt-2].str, yyS[yypt-0].str)))
				yyVAL.expr = ErrorExpression(_context, yyS[yypt-0].str)
			} else {
				yyVAL.expr = ReferenceExpression(_context, yyS[yypt-2].str, yyS[yypt-0].str)
			}
		}
	case 20:
		{
			period := translatePeriod(yyS[yypt-0].str)
			if funcName, ok := noArgFuncMap[yyS[yypt-2].str]; ok && _context.isPeriodSupport(period) {
				yyVAL.expr = CrossFunctionExpression(_context, funcName, "", period)
			} else {
				lexer, _ := yylex.(*yylexer)
				_context.addError(GeneralError(lexer.lineno, lexer.column, __yyfmt__.Sprintf("%s#%s not supported", yyS[yypt-2].str, yyS[yypt-0].str)))
				yyVAL.expr = ErrorExpression(_context, yyS[yypt-0].str)
			}
		}
	case 21:
		{
			period := translatePeriod(yyS[yypt-0].str)
			if !_context.isReferenceSupport(yyS[yypt-4].str, yyS[yypt-2].str) || !_context.isPeriodSupport(period) {
				lexer, _ := yylex.(*yylexer)
				_context.addError(GeneralError(lexer.lineno, lexer.column, __yyfmt__.Sprintf("%s.%s#%s not supported", yyS[yypt-4].str, yyS[yypt-2].str, yyS[yypt-0].str)))
				yyVAL.expr = ErrorExpression(_context, yyS[yypt-2].str)
			} else {
				yyVAL.expr = CrossReferenceExpression(_context, yyS[yypt-4].str, yyS[yypt-2].str, "", period)
			}
		}
	case 22:
		{
			parts := strings.Split(yyS[yypt-0].str[1:len(yyS[yypt-0].str)-1], "$")
			lexer, _ := yylex.(*yylexer)

			var reportError = func(msg string) {
				if msg == "" {
					msg = __yyfmt__.Sprintf("\"%s\" not supported", yyS[yypt-0].str)
				}
				_context.addError(GeneralError(lexer.lineno, lexer.column, msg))
				yyVAL.expr = ErrorExpression(_context, yyS[yypt-0].str)
			}

			if len(parts) != 2 {
				reportError("")
				break
			}

			code := parts[0]
			if !_context.isSecuritySupport(code) {
				reportError(__yyfmt__.Sprintf("code %s not supported", code))
				break
			}

			expr := parts[1]

			var period string

			parts = strings.Split(expr, "#")
			if len(parts) > 2 {
				reportError("")
				break
			} else if len(parts) == 2 {
				period = translatePeriod(parts[1])
				if !_context.isPeriodSupport(period) {
					reportError(__yyfmt__.Sprintf("period %s not supported", parts[1]))
					break
				}
			}

			parts = strings.Split(parts[0], ".")
			switch len(parts) {
			case 1:
				if funcName, ok := noArgFuncMap[parts[0]]; !ok {
					reportError(__yyfmt__.Sprintf("function %s not supported", parts[0]))
				} else {
					yyVAL.expr = CrossFunctionExpression(_context, funcName, code, period)
				}
			case 2:
				if !_context.isReferenceSupport(parts[0], parts[1]) {
					reportError("")
				} else {
					yyVAL.expr = CrossReferenceExpression(_context, parts[0], parts[1], code, period)
				}
			default:
				reportError("")
			}
		}
	case 23:
		{
			yyVAL.arguments = []expression{yyS[yypt-0].expr}
		}
	case 24:
		{
			yyVAL.arguments = append(yyVAL.arguments, yyS[yypt-0].expr)
		}
	case 25:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 26:
		{
			yyVAL.expr = UnaryExpression(_context, yyS[yypt-1].str, yyS[yypt-0].expr)
		}
	case 27:
		{
			yyVAL.expr = UnaryExpression(_context, yyS[yypt-1].str, yyS[yypt-0].expr)
		}
	case 28:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 29:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 30:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 31:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 32:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 33:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 34:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 35:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 36:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 37:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 38:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 39:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 40:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 41:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 42:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 43:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 44:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 45:
		{
			yyVAL.expr = BinaryExpression(_context, yyS[yypt-1].str, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
